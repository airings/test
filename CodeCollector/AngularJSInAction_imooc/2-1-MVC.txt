为什么需要MVC？
	前台代码规模越来越大，切分职责是大势所趋
	为了复用:很多逻辑是一模一样的，需要把公共的逻辑抽取出来
	为了后期维护方便：修改一块功能不影响其他功能。
	MVC只是手段，终极目标是模块化和复用。

前段MVC的困难在哪里？
	JS脚本运行是分为两个阶段：
		1. 浏览器加载脚本
		2. 加载完成之后JIT(即时编译器)编译执行
	操作DOM的代码必须等待整个页面全部加载完成。
	多个JS文件之间如果出现相互依赖，程序员必须自己解决
	JS的原型继承也给前段编程带来了很多困难

AngularJS的MVC是如何实现的？
	Controller实现方式1 - 经典方式：
		控制器跟视图进行双向交互，也跟数据模型双向交互，但是数据模型和视图是没有交互的。
		一个控制器是可以控制多个视图的；尽管视图1和视图2没有逻辑关系，我们也只能把他们的代码放入到同一个控制器中。
	Controller实现方式2 - 分离：
		一个控制器只跟一个视图交互
		问题：控制器1和控制器2里面有公共方法怎么办？
	Controller实现方式3 - 继承：
		抽取公共部分，其他控制器来继承
		这是一个典型错误，在AngularJS中不要去做。
	Controller实现方式3 - Service：
		标准做法是通过service来放置这些公共的代码
	
	如何使用controller?
		Controller使用过程中的注意点：
		1.不要试图去复用Controller，一个控制器一般只负责一小块视图
		2.不要在Controller中操作DOM，这不是控制器的职责。而是将操作DOM代码封装到Directive中。
			原因是速度是非常低的，操作一下html的标签，就会导致浏览器重绘/重新布局
		3.不要在Controller里面做数据格式化，ng有很好用的表单控件。
		4.不要在Controller里面做数据过滤操作，ng有$filter服务。
		5.一般来说，Controller是不会互相调用的，这会造成强耦合。控制器之间的交互要通过$scope或者数据模型上的事件进行，controller来监听这些事件。
		
	如何复用Model？
		